// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
)

func Use(db *gorm.DB) *Query {
	return &Query{
		db:                       db,
		Captcha:                  newCaptcha(db),
		FormulaTitleMap:          newFormulaTitleMap(db),
		Log:                      newLog(db),
		LoginToken:               newLoginToken(db),
		Page:                     newPage(db),
		Setting:                  newSetting(db),
		Standard:                 newStandard(db),
		StandardStatement:        newStandardStatement(db),
		StandardStatementFormula: newStandardStatementFormula(db),
		StandardStatementTitle:   newStandardStatementTitle(db),
		Task:                     newTask(db),
		User:                     newUser(db),
	}
}

type Query struct {
	db *gorm.DB

	Captcha                  captcha
	FormulaTitleMap          formulaTitleMap
	Log                      log
	LoginToken               loginToken
	Page                     page
	Setting                  setting
	Standard                 standard
	StandardStatement        standardStatement
	StandardStatementFormula standardStatementFormula
	StandardStatementTitle   standardStatementTitle
	Task                     task
	User                     user
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                       db,
		Captcha:                  q.Captcha.clone(db),
		FormulaTitleMap:          q.FormulaTitleMap.clone(db),
		Log:                      q.Log.clone(db),
		LoginToken:               q.LoginToken.clone(db),
		Page:                     q.Page.clone(db),
		Setting:                  q.Setting.clone(db),
		Standard:                 q.Standard.clone(db),
		StandardStatement:        q.StandardStatement.clone(db),
		StandardStatementFormula: q.StandardStatementFormula.clone(db),
		StandardStatementTitle:   q.StandardStatementTitle.clone(db),
		Task:                     q.Task.clone(db),
		User:                     q.User.clone(db),
	}
}

type queryCtx struct {
	Captcha                  *captchaDo
	FormulaTitleMap          *formulaTitleMapDo
	Log                      *logDo
	LoginToken               *loginTokenDo
	Page                     *pageDo
	Setting                  *settingDo
	Standard                 *standardDo
	StandardStatement        *standardStatementDo
	StandardStatementFormula *standardStatementFormulaDo
	StandardStatementTitle   *standardStatementTitleDo
	Task                     *taskDo
	User                     *userDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Captcha:                  q.Captcha.WithContext(ctx),
		FormulaTitleMap:          q.FormulaTitleMap.WithContext(ctx),
		Log:                      q.Log.WithContext(ctx),
		LoginToken:               q.LoginToken.WithContext(ctx),
		Page:                     q.Page.WithContext(ctx),
		Setting:                  q.Setting.WithContext(ctx),
		Standard:                 q.Standard.WithContext(ctx),
		StandardStatement:        q.StandardStatement.WithContext(ctx),
		StandardStatementFormula: q.StandardStatementFormula.WithContext(ctx),
		StandardStatementTitle:   q.StandardStatementTitle.WithContext(ctx),
		Task:                     q.Task.WithContext(ctx),
		User:                     q.User.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	return &QueryTx{q.clone(q.db.Begin(opts...))}
}

type QueryTx struct{ *Query }

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
