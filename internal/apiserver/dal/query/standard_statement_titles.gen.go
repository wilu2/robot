// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"financial_statement/internal/apiserver/dal/model"
)

func newStandardStatementTitle(db *gorm.DB) standardStatementTitle {
	_standardStatementTitle := standardStatementTitle{}

	_standardStatementTitle.standardStatementTitleDo.UseDB(db)
	_standardStatementTitle.standardStatementTitleDo.UseModel(&model.StandardStatementTitle{})

	tableName := _standardStatementTitle.standardStatementTitleDo.TableName()
	_standardStatementTitle.ALL = field.NewField(tableName, "*")
	_standardStatementTitle.ID = field.NewUint32(tableName, "id")
	_standardStatementTitle.StatementID = field.NewUint32(tableName, "statement_id")
	_standardStatementTitle.Name = field.NewString(tableName, "name")
	_standardStatementTitle.ExternalID = field.NewString(tableName, "external_id")
	_standardStatementTitle.Aliases = field.NewString(tableName, "aliases")
	_standardStatementTitle.Status = field.NewInt32(tableName, "status")
	_standardStatementTitle.OrderByID = field.NewInt32(tableName, "order_by_id")
	_standardStatementTitle.CreateAt = field.NewInt64(tableName, "create_at")
	_standardStatementTitle.UpdateAt = field.NewInt64(tableName, "update_at")

	_standardStatementTitle.fillFieldMap()

	return _standardStatementTitle
}

type standardStatementTitle struct {
	standardStatementTitleDo standardStatementTitleDo

	ALL         field.Field
	ID          field.Uint32
	StatementID field.Uint32
	Name        field.String
	ExternalID  field.String
	Aliases     field.String
	Status      field.Int32
	OrderByID   field.Int32
	CreateAt    field.Int64
	UpdateAt    field.Int64

	fieldMap map[string]field.Expr
}

func (s standardStatementTitle) Table(newTableName string) *standardStatementTitle {
	s.standardStatementTitleDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s standardStatementTitle) As(alias string) *standardStatementTitle {
	s.standardStatementTitleDo.DO = *(s.standardStatementTitleDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *standardStatementTitle) updateTableName(table string) *standardStatementTitle {
	s.ALL = field.NewField(table, "*")
	s.ID = field.NewUint32(table, "id")
	s.StatementID = field.NewUint32(table, "statement_id")
	s.Name = field.NewString(table, "name")
	s.ExternalID = field.NewString(table, "external_id")
	s.Aliases = field.NewString(table, "aliases")
	s.Status = field.NewInt32(table, "status")
	s.OrderByID = field.NewInt32(table, "order_by_id")
	s.CreateAt = field.NewInt64(table, "create_at")
	s.UpdateAt = field.NewInt64(table, "update_at")

	s.fillFieldMap()

	return s
}

func (s *standardStatementTitle) WithContext(ctx context.Context) *standardStatementTitleDo {
	return s.standardStatementTitleDo.WithContext(ctx)
}

func (s standardStatementTitle) TableName() string { return s.standardStatementTitleDo.TableName() }

func (s standardStatementTitle) Alias() string { return s.standardStatementTitleDo.Alias() }

func (s *standardStatementTitle) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *standardStatementTitle) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 9)
	s.fieldMap["id"] = s.ID
	s.fieldMap["statement_id"] = s.StatementID
	s.fieldMap["name"] = s.Name
	s.fieldMap["external_id"] = s.ExternalID
	s.fieldMap["aliases"] = s.Aliases
	s.fieldMap["status"] = s.Status
	s.fieldMap["order_by_id"] = s.OrderByID
	s.fieldMap["create_at"] = s.CreateAt
	s.fieldMap["update_at"] = s.UpdateAt
}

func (s standardStatementTitle) clone(db *gorm.DB) standardStatementTitle {
	s.standardStatementTitleDo.ReplaceDB(db)
	return s
}

type standardStatementTitleDo struct{ gen.DO }

func (s standardStatementTitleDo) Debug() *standardStatementTitleDo {
	return s.withDO(s.DO.Debug())
}

func (s standardStatementTitleDo) WithContext(ctx context.Context) *standardStatementTitleDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s standardStatementTitleDo) ReadDB() *standardStatementTitleDo {
	return s.Clauses(dbresolver.Read)
}

func (s standardStatementTitleDo) WriteDB() *standardStatementTitleDo {
	return s.Clauses(dbresolver.Write)
}

func (s standardStatementTitleDo) Clauses(conds ...clause.Expression) *standardStatementTitleDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s standardStatementTitleDo) Returning(value interface{}, columns ...string) *standardStatementTitleDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s standardStatementTitleDo) Not(conds ...gen.Condition) *standardStatementTitleDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s standardStatementTitleDo) Or(conds ...gen.Condition) *standardStatementTitleDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s standardStatementTitleDo) Select(conds ...field.Expr) *standardStatementTitleDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s standardStatementTitleDo) Where(conds ...gen.Condition) *standardStatementTitleDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s standardStatementTitleDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *standardStatementTitleDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s standardStatementTitleDo) Order(conds ...field.Expr) *standardStatementTitleDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s standardStatementTitleDo) Distinct(cols ...field.Expr) *standardStatementTitleDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s standardStatementTitleDo) Omit(cols ...field.Expr) *standardStatementTitleDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s standardStatementTitleDo) Join(table schema.Tabler, on ...field.Expr) *standardStatementTitleDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s standardStatementTitleDo) LeftJoin(table schema.Tabler, on ...field.Expr) *standardStatementTitleDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s standardStatementTitleDo) RightJoin(table schema.Tabler, on ...field.Expr) *standardStatementTitleDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s standardStatementTitleDo) Group(cols ...field.Expr) *standardStatementTitleDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s standardStatementTitleDo) Having(conds ...gen.Condition) *standardStatementTitleDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s standardStatementTitleDo) Limit(limit int) *standardStatementTitleDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s standardStatementTitleDo) Offset(offset int) *standardStatementTitleDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s standardStatementTitleDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *standardStatementTitleDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s standardStatementTitleDo) Unscoped() *standardStatementTitleDo {
	return s.withDO(s.DO.Unscoped())
}

func (s standardStatementTitleDo) Create(values ...*model.StandardStatementTitle) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s standardStatementTitleDo) CreateInBatches(values []*model.StandardStatementTitle, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s standardStatementTitleDo) Save(values ...*model.StandardStatementTitle) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s standardStatementTitleDo) First() (*model.StandardStatementTitle, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.StandardStatementTitle), nil
	}
}

func (s standardStatementTitleDo) Take() (*model.StandardStatementTitle, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.StandardStatementTitle), nil
	}
}

func (s standardStatementTitleDo) Last() (*model.StandardStatementTitle, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.StandardStatementTitle), nil
	}
}

func (s standardStatementTitleDo) Find() ([]*model.StandardStatementTitle, error) {
	result, err := s.DO.Find()
	return result.([]*model.StandardStatementTitle), err
}

func (s standardStatementTitleDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.StandardStatementTitle, err error) {
	buf := make([]*model.StandardStatementTitle, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s standardStatementTitleDo) FindInBatches(result *[]*model.StandardStatementTitle, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s standardStatementTitleDo) Attrs(attrs ...field.AssignExpr) *standardStatementTitleDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s standardStatementTitleDo) Assign(attrs ...field.AssignExpr) *standardStatementTitleDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s standardStatementTitleDo) Joins(fields ...field.RelationField) *standardStatementTitleDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s standardStatementTitleDo) Preload(fields ...field.RelationField) *standardStatementTitleDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s standardStatementTitleDo) FirstOrInit() (*model.StandardStatementTitle, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.StandardStatementTitle), nil
	}
}

func (s standardStatementTitleDo) FirstOrCreate() (*model.StandardStatementTitle, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.StandardStatementTitle), nil
	}
}

func (s standardStatementTitleDo) FindByPage(offset int, limit int) (result []*model.StandardStatementTitle, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s standardStatementTitleDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s standardStatementTitleDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s standardStatementTitleDo) Delete(models ...*model.StandardStatementTitle) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *standardStatementTitleDo) withDO(do gen.Dao) *standardStatementTitleDo {
	s.DO = *do.(*gen.DO)
	return s
}
