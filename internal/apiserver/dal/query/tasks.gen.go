// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"financial_statement/internal/apiserver/dal/model"
)

func newTask(db *gorm.DB) task {
	_task := task{}

	_task.taskDo.UseDB(db)
	_task.taskDo.UseModel(&model.Task{})

	tableName := _task.taskDo.TableName()
	_task.ALL = field.NewField(tableName, "*")
	_task.ID = field.NewUint32(tableName, "id")
	_task.TaskName = field.NewString(tableName, "task_name")
	_task.FileFormat = field.NewString(tableName, "file_format")
	_task.StandardID = field.NewUint32(tableName, "standard_id")
	_task.ExternalInfo = field.NewString(tableName, "external_info")
	_task.Async = field.NewInt32(tableName, "async")
	_task.AsyncStatus = field.NewInt32(tableName, "async_status")
	_task.Status = field.NewInt32(tableName, "status")
	_task.CreaterUserID = field.NewUint32(tableName, "creater_user_id")
	_task.StandardResult = field.NewString(tableName, "standard_result")
	_task.Files = field.NewString(tableName, "files")
	_task.Error = field.NewString(tableName, "error")
	_task.CreatedAt = field.NewInt64(tableName, "created_at")
	_task.UpdatedAt = field.NewInt64(tableName, "updated_at")

	_task.fillFieldMap()

	return _task
}

type task struct {
	taskDo taskDo

	ALL            field.Field
	ID             field.Uint32
	TaskName       field.String
	FileFormat     field.String
	StandardID     field.Uint32
	ExternalInfo   field.String
	Async          field.Int32
	AsyncStatus    field.Int32
	Status         field.Int32
	CreaterUserID  field.Uint32
	StandardResult field.String
	Files          field.String
	Error          field.String
	CreatedAt      field.Int64
	UpdatedAt      field.Int64

	fieldMap map[string]field.Expr
}

func (t task) Table(newTableName string) *task {
	t.taskDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t task) As(alias string) *task {
	t.taskDo.DO = *(t.taskDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *task) updateTableName(table string) *task {
	t.ALL = field.NewField(table, "*")
	t.ID = field.NewUint32(table, "id")
	t.TaskName = field.NewString(table, "task_name")
	t.FileFormat = field.NewString(table, "file_format")
	t.StandardID = field.NewUint32(table, "standard_id")
	t.ExternalInfo = field.NewString(table, "external_info")
	t.Async = field.NewInt32(table, "async")
	t.AsyncStatus = field.NewInt32(table, "async_status")
	t.Status = field.NewInt32(table, "status")
	t.CreaterUserID = field.NewUint32(table, "creater_user_id")
	t.StandardResult = field.NewString(table, "standard_result")
	t.Files = field.NewString(table, "files")
	t.Error = field.NewString(table, "error")
	t.CreatedAt = field.NewInt64(table, "created_at")
	t.UpdatedAt = field.NewInt64(table, "updated_at")

	t.fillFieldMap()

	return t
}

func (t *task) WithContext(ctx context.Context) *taskDo { return t.taskDo.WithContext(ctx) }

func (t task) TableName() string { return t.taskDo.TableName() }

func (t task) Alias() string { return t.taskDo.Alias() }

func (t *task) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *task) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 14)
	t.fieldMap["id"] = t.ID
	t.fieldMap["task_name"] = t.TaskName
	t.fieldMap["file_format"] = t.FileFormat
	t.fieldMap["standard_id"] = t.StandardID
	t.fieldMap["external_info"] = t.ExternalInfo
	t.fieldMap["async"] = t.Async
	t.fieldMap["async_status"] = t.AsyncStatus
	t.fieldMap["status"] = t.Status
	t.fieldMap["creater_user_id"] = t.CreaterUserID
	t.fieldMap["standard_result"] = t.StandardResult
	t.fieldMap["files"] = t.Files
	t.fieldMap["error"] = t.Error
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
}

func (t task) clone(db *gorm.DB) task {
	t.taskDo.ReplaceDB(db)
	return t
}

type taskDo struct{ gen.DO }

func (t taskDo) Debug() *taskDo {
	return t.withDO(t.DO.Debug())
}

func (t taskDo) WithContext(ctx context.Context) *taskDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t taskDo) ReadDB() *taskDo {
	return t.Clauses(dbresolver.Read)
}

func (t taskDo) WriteDB() *taskDo {
	return t.Clauses(dbresolver.Write)
}

func (t taskDo) Clauses(conds ...clause.Expression) *taskDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t taskDo) Returning(value interface{}, columns ...string) *taskDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t taskDo) Not(conds ...gen.Condition) *taskDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t taskDo) Or(conds ...gen.Condition) *taskDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t taskDo) Select(conds ...field.Expr) *taskDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t taskDo) Where(conds ...gen.Condition) *taskDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t taskDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *taskDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t taskDo) Order(conds ...field.Expr) *taskDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t taskDo) Distinct(cols ...field.Expr) *taskDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t taskDo) Omit(cols ...field.Expr) *taskDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t taskDo) Join(table schema.Tabler, on ...field.Expr) *taskDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t taskDo) LeftJoin(table schema.Tabler, on ...field.Expr) *taskDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t taskDo) RightJoin(table schema.Tabler, on ...field.Expr) *taskDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t taskDo) Group(cols ...field.Expr) *taskDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t taskDo) Having(conds ...gen.Condition) *taskDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t taskDo) Limit(limit int) *taskDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t taskDo) Offset(offset int) *taskDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t taskDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *taskDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t taskDo) Unscoped() *taskDo {
	return t.withDO(t.DO.Unscoped())
}

func (t taskDo) Create(values ...*model.Task) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t taskDo) CreateInBatches(values []*model.Task, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t taskDo) Save(values ...*model.Task) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t taskDo) First() (*model.Task, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Task), nil
	}
}

func (t taskDo) Take() (*model.Task, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Task), nil
	}
}

func (t taskDo) Last() (*model.Task, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Task), nil
	}
}

func (t taskDo) Find() ([]*model.Task, error) {
	result, err := t.DO.Find()
	return result.([]*model.Task), err
}

func (t taskDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Task, err error) {
	buf := make([]*model.Task, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t taskDo) FindInBatches(result *[]*model.Task, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t taskDo) Attrs(attrs ...field.AssignExpr) *taskDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t taskDo) Assign(attrs ...field.AssignExpr) *taskDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t taskDo) Joins(fields ...field.RelationField) *taskDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t taskDo) Preload(fields ...field.RelationField) *taskDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t taskDo) FirstOrInit() (*model.Task, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Task), nil
	}
}

func (t taskDo) FirstOrCreate() (*model.Task, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Task), nil
	}
}

func (t taskDo) FindByPage(offset int, limit int) (result []*model.Task, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t taskDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t taskDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t taskDo) Delete(models ...*model.Task) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *taskDo) withDO(do gen.Dao) *taskDo {
	t.DO = *do.(*gen.DO)
	return t
}
