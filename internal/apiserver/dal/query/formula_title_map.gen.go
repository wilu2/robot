// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"financial_statement/internal/apiserver/dal/model"
)

func newFormulaTitleMap(db *gorm.DB) formulaTitleMap {
	_formulaTitleMap := formulaTitleMap{}

	_formulaTitleMap.formulaTitleMapDo.UseDB(db)
	_formulaTitleMap.formulaTitleMapDo.UseModel(&model.FormulaTitleMap{})

	tableName := _formulaTitleMap.formulaTitleMapDo.TableName()
	_formulaTitleMap.ALL = field.NewField(tableName, "*")
	_formulaTitleMap.FormulaID = field.NewUint32(tableName, "formula_id")
	_formulaTitleMap.TitleID = field.NewUint32(tableName, "title_id")

	_formulaTitleMap.fillFieldMap()

	return _formulaTitleMap
}

type formulaTitleMap struct {
	formulaTitleMapDo formulaTitleMapDo

	ALL       field.Field
	FormulaID field.Uint32
	TitleID   field.Uint32

	fieldMap map[string]field.Expr
}

func (f formulaTitleMap) Table(newTableName string) *formulaTitleMap {
	f.formulaTitleMapDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f formulaTitleMap) As(alias string) *formulaTitleMap {
	f.formulaTitleMapDo.DO = *(f.formulaTitleMapDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *formulaTitleMap) updateTableName(table string) *formulaTitleMap {
	f.ALL = field.NewField(table, "*")
	f.FormulaID = field.NewUint32(table, "formula_id")
	f.TitleID = field.NewUint32(table, "title_id")

	f.fillFieldMap()

	return f
}

func (f *formulaTitleMap) WithContext(ctx context.Context) *formulaTitleMapDo {
	return f.formulaTitleMapDo.WithContext(ctx)
}

func (f formulaTitleMap) TableName() string { return f.formulaTitleMapDo.TableName() }

func (f formulaTitleMap) Alias() string { return f.formulaTitleMapDo.Alias() }

func (f *formulaTitleMap) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *formulaTitleMap) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 2)
	f.fieldMap["formula_id"] = f.FormulaID
	f.fieldMap["title_id"] = f.TitleID
}

func (f formulaTitleMap) clone(db *gorm.DB) formulaTitleMap {
	f.formulaTitleMapDo.ReplaceDB(db)
	return f
}

type formulaTitleMapDo struct{ gen.DO }

func (f formulaTitleMapDo) Debug() *formulaTitleMapDo {
	return f.withDO(f.DO.Debug())
}

func (f formulaTitleMapDo) WithContext(ctx context.Context) *formulaTitleMapDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f formulaTitleMapDo) ReadDB() *formulaTitleMapDo {
	return f.Clauses(dbresolver.Read)
}

func (f formulaTitleMapDo) WriteDB() *formulaTitleMapDo {
	return f.Clauses(dbresolver.Write)
}

func (f formulaTitleMapDo) Clauses(conds ...clause.Expression) *formulaTitleMapDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f formulaTitleMapDo) Returning(value interface{}, columns ...string) *formulaTitleMapDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f formulaTitleMapDo) Not(conds ...gen.Condition) *formulaTitleMapDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f formulaTitleMapDo) Or(conds ...gen.Condition) *formulaTitleMapDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f formulaTitleMapDo) Select(conds ...field.Expr) *formulaTitleMapDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f formulaTitleMapDo) Where(conds ...gen.Condition) *formulaTitleMapDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f formulaTitleMapDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *formulaTitleMapDo {
	return f.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (f formulaTitleMapDo) Order(conds ...field.Expr) *formulaTitleMapDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f formulaTitleMapDo) Distinct(cols ...field.Expr) *formulaTitleMapDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f formulaTitleMapDo) Omit(cols ...field.Expr) *formulaTitleMapDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f formulaTitleMapDo) Join(table schema.Tabler, on ...field.Expr) *formulaTitleMapDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f formulaTitleMapDo) LeftJoin(table schema.Tabler, on ...field.Expr) *formulaTitleMapDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f formulaTitleMapDo) RightJoin(table schema.Tabler, on ...field.Expr) *formulaTitleMapDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f formulaTitleMapDo) Group(cols ...field.Expr) *formulaTitleMapDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f formulaTitleMapDo) Having(conds ...gen.Condition) *formulaTitleMapDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f formulaTitleMapDo) Limit(limit int) *formulaTitleMapDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f formulaTitleMapDo) Offset(offset int) *formulaTitleMapDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f formulaTitleMapDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *formulaTitleMapDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f formulaTitleMapDo) Unscoped() *formulaTitleMapDo {
	return f.withDO(f.DO.Unscoped())
}

func (f formulaTitleMapDo) Create(values ...*model.FormulaTitleMap) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f formulaTitleMapDo) CreateInBatches(values []*model.FormulaTitleMap, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f formulaTitleMapDo) Save(values ...*model.FormulaTitleMap) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f formulaTitleMapDo) First() (*model.FormulaTitleMap, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FormulaTitleMap), nil
	}
}

func (f formulaTitleMapDo) Take() (*model.FormulaTitleMap, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FormulaTitleMap), nil
	}
}

func (f formulaTitleMapDo) Last() (*model.FormulaTitleMap, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FormulaTitleMap), nil
	}
}

func (f formulaTitleMapDo) Find() ([]*model.FormulaTitleMap, error) {
	result, err := f.DO.Find()
	return result.([]*model.FormulaTitleMap), err
}

func (f formulaTitleMapDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FormulaTitleMap, err error) {
	buf := make([]*model.FormulaTitleMap, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f formulaTitleMapDo) FindInBatches(result *[]*model.FormulaTitleMap, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f formulaTitleMapDo) Attrs(attrs ...field.AssignExpr) *formulaTitleMapDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f formulaTitleMapDo) Assign(attrs ...field.AssignExpr) *formulaTitleMapDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f formulaTitleMapDo) Joins(fields ...field.RelationField) *formulaTitleMapDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f formulaTitleMapDo) Preload(fields ...field.RelationField) *formulaTitleMapDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f formulaTitleMapDo) FirstOrInit() (*model.FormulaTitleMap, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FormulaTitleMap), nil
	}
}

func (f formulaTitleMapDo) FirstOrCreate() (*model.FormulaTitleMap, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FormulaTitleMap), nil
	}
}

func (f formulaTitleMapDo) FindByPage(offset int, limit int) (result []*model.FormulaTitleMap, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f formulaTitleMapDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f formulaTitleMapDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f formulaTitleMapDo) Delete(models ...*model.FormulaTitleMap) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *formulaTitleMapDo) withDO(do gen.Dao) *formulaTitleMapDo {
	f.DO = *do.(*gen.DO)
	return f
}
