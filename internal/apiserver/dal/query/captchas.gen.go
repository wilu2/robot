// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"financial_statement/internal/apiserver/dal/model"
)

func newCaptcha(db *gorm.DB) captcha {
	_captcha := captcha{}

	_captcha.captchaDo.UseDB(db)
	_captcha.captchaDo.UseModel(&model.Captcha{})

	tableName := _captcha.captchaDo.TableName()
	_captcha.ALL = field.NewField(tableName, "*")
	_captcha.ID = field.NewUint32(tableName, "id")
	_captcha.Captcha = field.NewString(tableName, "captcha")
	_captcha.CaptchaID = field.NewString(tableName, "captcha_id")
	_captcha.CreatedAt = field.NewInt64(tableName, "created_at")
	_captcha.Expiry = field.NewInt64(tableName, "expiry")

	_captcha.fillFieldMap()

	return _captcha
}

type captcha struct {
	captchaDo captchaDo

	ALL       field.Field
	ID        field.Uint32
	Captcha   field.String
	CaptchaID field.String
	CreatedAt field.Int64
	Expiry    field.Int64

	fieldMap map[string]field.Expr
}

func (c captcha) Table(newTableName string) *captcha {
	c.captchaDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c captcha) As(alias string) *captcha {
	c.captchaDo.DO = *(c.captchaDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *captcha) updateTableName(table string) *captcha {
	c.ALL = field.NewField(table, "*")
	c.ID = field.NewUint32(table, "id")
	c.Captcha = field.NewString(table, "captcha")
	c.CaptchaID = field.NewString(table, "captcha_id")
	c.CreatedAt = field.NewInt64(table, "created_at")
	c.Expiry = field.NewInt64(table, "expiry")

	c.fillFieldMap()

	return c
}

func (c *captcha) WithContext(ctx context.Context) *captchaDo { return c.captchaDo.WithContext(ctx) }

func (c captcha) TableName() string { return c.captchaDo.TableName() }

func (c captcha) Alias() string { return c.captchaDo.Alias() }

func (c *captcha) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *captcha) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 5)
	c.fieldMap["id"] = c.ID
	c.fieldMap["captcha"] = c.Captcha
	c.fieldMap["captcha_id"] = c.CaptchaID
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["expiry"] = c.Expiry
}

func (c captcha) clone(db *gorm.DB) captcha {
	c.captchaDo.ReplaceDB(db)
	return c
}

type captchaDo struct{ gen.DO }

func (c captchaDo) Debug() *captchaDo {
	return c.withDO(c.DO.Debug())
}

func (c captchaDo) WithContext(ctx context.Context) *captchaDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c captchaDo) ReadDB() *captchaDo {
	return c.Clauses(dbresolver.Read)
}

func (c captchaDo) WriteDB() *captchaDo {
	return c.Clauses(dbresolver.Write)
}

func (c captchaDo) Clauses(conds ...clause.Expression) *captchaDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c captchaDo) Returning(value interface{}, columns ...string) *captchaDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c captchaDo) Not(conds ...gen.Condition) *captchaDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c captchaDo) Or(conds ...gen.Condition) *captchaDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c captchaDo) Select(conds ...field.Expr) *captchaDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c captchaDo) Where(conds ...gen.Condition) *captchaDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c captchaDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *captchaDo {
	return c.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (c captchaDo) Order(conds ...field.Expr) *captchaDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c captchaDo) Distinct(cols ...field.Expr) *captchaDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c captchaDo) Omit(cols ...field.Expr) *captchaDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c captchaDo) Join(table schema.Tabler, on ...field.Expr) *captchaDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c captchaDo) LeftJoin(table schema.Tabler, on ...field.Expr) *captchaDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c captchaDo) RightJoin(table schema.Tabler, on ...field.Expr) *captchaDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c captchaDo) Group(cols ...field.Expr) *captchaDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c captchaDo) Having(conds ...gen.Condition) *captchaDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c captchaDo) Limit(limit int) *captchaDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c captchaDo) Offset(offset int) *captchaDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c captchaDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *captchaDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c captchaDo) Unscoped() *captchaDo {
	return c.withDO(c.DO.Unscoped())
}

func (c captchaDo) Create(values ...*model.Captcha) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c captchaDo) CreateInBatches(values []*model.Captcha, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c captchaDo) Save(values ...*model.Captcha) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c captchaDo) First() (*model.Captcha, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Captcha), nil
	}
}

func (c captchaDo) Take() (*model.Captcha, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Captcha), nil
	}
}

func (c captchaDo) Last() (*model.Captcha, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Captcha), nil
	}
}

func (c captchaDo) Find() ([]*model.Captcha, error) {
	result, err := c.DO.Find()
	return result.([]*model.Captcha), err
}

func (c captchaDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Captcha, err error) {
	buf := make([]*model.Captcha, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c captchaDo) FindInBatches(result *[]*model.Captcha, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c captchaDo) Attrs(attrs ...field.AssignExpr) *captchaDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c captchaDo) Assign(attrs ...field.AssignExpr) *captchaDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c captchaDo) Joins(fields ...field.RelationField) *captchaDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c captchaDo) Preload(fields ...field.RelationField) *captchaDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c captchaDo) FirstOrInit() (*model.Captcha, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Captcha), nil
	}
}

func (c captchaDo) FirstOrCreate() (*model.Captcha, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Captcha), nil
	}
}

func (c captchaDo) FindByPage(offset int, limit int) (result []*model.Captcha, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c captchaDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c captchaDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c captchaDo) Delete(models ...*model.Captcha) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *captchaDo) withDO(do gen.Dao) *captchaDo {
	c.DO = *do.(*gen.DO)
	return c
}
