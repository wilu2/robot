syntax = "v1"

type UserPangu {
	Name     string `json:"name"`
	Account  string `json:"account"`
	Password string `json:"password"`
}

type PwdLoginReq {
	Account  string `json:"account"`
	Password string `json:"password"`
}

type PwdLoginResp {
	Expiry  int64  `json:"expiry"`
	Token   string `json:"token"`
	ID      uint32   `json:"id"`
	Name    string `json:"name"`
	Email   string `json:"email"`
	Mobile  string `json:"mobile"`
	IsAdmin bool   `json:"is_admin"`
}

type CreateUserReq {
	Name     string `json:"name"`
	Account  string `json:"account"`
	Password string `json:"password"`
	Email    string `json:"email"`
	Mobile   string `json:"mobile"`
}

type UpdateUserReq {
	ID       uint32    `json:"id"`
	Name     *string `json:"name" mapstructure:",omitempty"`
	Password *string `json:"password" mapstructure:",omitempty"`
	Email    *string `json:"email" mapstructure:",omitempty"`
	Mobile   *string `json:"mobile" mapstructure:",omitempty"`
}

type DeleteUserReq {
	ID uint32 `json:"id"`
}

type ListUserResp {
	Users []UserInfo `json:"users"`
	Count int64 	`json:"count"`
}

type GetUserReq {
	ID uint32 `path:"id"`
}

type GetUserResp {
	UserInfo
}

type UserInfo {
	ID         uint32 `json:"id"`
	Name       string `json:"name"`
	Account    string `json:"account"`
	Email      string `json:"email"`
	Mobile     string `json:"mobile"`
	status     int    `json:"status"`
	ExpiryTime int64  `json:"expiry_time"`
	CreatedAt  int64  `json:"created_at"`
	UpdatedAt  int64  `json:"updated_at"`
}

type SsoTicketVerificationReq {
	Ticket string `form:"ticket"`
}

type UserListReq struct {
	Page    	uint32 	`form:"page,default=1" default:"1"`
	PerPage 	uint32 	`form:"per_page,default=20" default:"20"`

	// 支持create_time 与 update_time 排序，默认是create_time
	OrderBy		string  `form:"order_by,default=create_time" default:"create_time"`
	// 支持asc与desc，默认是desc
	OrderByType	string	`form:"order_by_type,default=desc" default:"desc"`
}

type UpdatePwdReq {
	Account     string `json:"account"`
	OldPassword string `json:"old_password"`
	NewPassword string `json:"new_password"`
}

type UpdateUserStatusReq {
	ID         uint32 `json:"id"`
	status     int32  `json:"status"`
	ExpiryTime int64  `json:"expiry_time"`
}

@server(
	group: userUnauthorization
	prefix: /v2/user
)
service financial_statement {
	@doc "系统初始化创建系统管理员"
	@handler userPangu
	post /pangu (UserPangu)

	@doc "用户登录"
	@handler userLogin
	post /login (PwdLoginReq) returns (PwdLoginResp)

	@doc "用户登出"
	@handler userLogout
	get /logout

	@doc "sso登录ticket验证，成功后返回一个用户token"
	@handler ssoTicketVerification
	get /sso/ticket/verification (SsoTicketVerificationReq) returns (PwdLoginResp)

	@doc "不使用token修改用户密码，需要旧密码"
	@handler userUpdatePwd
	post /updatepwd (UpdatePwdReq)
}

@server(
	group: user
	middleware: AuthorizationMiddleware
	prefix: /v2/user
)

service financial_statement {
	
	@doc "新建用户"
	@handler userCreate
	post /create (CreateUserReq)
	
	@doc "删除用户"
	@handler userDelete
	post /delete (DeleteUserReq)
	
	@doc "列出用户"
	@handler userList
	get /list (UserListReq) returns (ListUserResp)
	
	@doc "查看用户"
	@handler userInfo
	get /:id (GetUserReq) returns (GetUserResp)
	
	@doc "修改用户信息"
	@handler userUpdate
	post /update (UpdateUserReq)

	@doc "修改用户状态，有效期"
	@handler userStatusUpdate
	post /status/update (UpdateUserStatusReq)
}